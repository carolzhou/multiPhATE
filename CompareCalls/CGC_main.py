#!/usr/bin/env python

################################################################
#
# CGC_main.py  # Compare Gene Calls Main
#
# Programmer: Carol Zhou
#
# Description:  Accepts a list of input files, each comprising a set of
#    gene calls from a given gene caller program (e.g., Prodigal, Glimmer,
#    GeneMark, RAST, PHANOTATE).  Outputs comparisons accross the gene calls. 
#    Note:  The input files are re-formatted using CGC_parser.py, so that
#    they have a common format and identify the gene caller in the comments
#    at the top of the file.
#
################################################################

# This code was developed by Carol L. Ecale Zhou at Lawrence Livermore National Laboratory.
# THIS CODE IS COVERED BY THE BSD LICENSE. SEE INCLUDED FILE BSD.pdf FOR DETAILS.

import os

PHATE_PIPELINE = True  # Running this code within the PhATE pipeline. Set this to False if running code independently
#PHATE_PIPELINE = False

##### VERBOSITY

# Note: These environment variables are set in CGC_parser.py, which is usually run before CGC_main.py
# Therefore, if you have not run CGC_parser.py first, then you need to set these environment variables
# by hand at the command line. Set env vars to 'True' or 'False' as strings, not booleans.

#CGC_WARNINGS = 'True'
#CGC_MESSAGES = 'True'
#CGC_PROGRESS = 'True'
CGC_WARNINGS = 'False'
CGC_MESSAGES = 'False'
CGC_PROGRESS = 'False'

#if PHATE_PIPELINE:
#    CGC_WARNINGS = os.environ["CGC_WARNINGS"]
#    CGC_MESSAGES = os.environ["CGC_MESSAGES"]
#    CGC_PROGRESS = os.environ["CGC_PROGRESS"]

#DEBUG = True
DEBUG = False

##### Import modules

import sys
import re
import string
import copy
from subprocess import call
import CGC_geneCall
import CGC_compare
import datetime

##### FILES

CODE_BASE = "CGC_main"
CODE_FILE = CODE_BASE + ".py"
LOG_FILE  = CODE_BASE + ".log"
OUT_FILE  = CODE_BASE + ".out"
GFF_FILE  = CODE_BASE + ".gff"

infile = ""
#OUT = open(OUT_FILE,"w") 
LOG = open(LOG_FILE,"w")
GFF = open(GFF_FILE,"w")

##### PATTERNS

p_comment  = re.compile('^#')
p_order    = re.compile('Order')
p_log      = re.compile("log=([\w\d\_\-\.\\\/]+)")
p_gff      = re.compile("gff=([\w\d\_\-\.\\\/]+)")

##### CONSTANTS

HELP_STRING = "This code inputs a list of at least 2 files comprising gene calls (generated by a gene caller program) and outputs the genes that are in common and unique with respect to each caller.  Type: python " + CODE_FILE + " usage|input|detail for more information\n"

USAGE_STRING = "Usage:  python " + CODE_FILE + " <infile>n\n"

INPUT_STRING = "Input for " + CODE_FILE + " comprises a list of path/filenames comprising outputs generated by gene caller programs, with each separated by a single space. The output files are to have been prepared using code \"CGC_parser.py\" to assure that they have a common pre-defined format and indicate the name of the gene caller in the comments section.\nExample:  python " + CODE_FILE + " genemark.calls prodigal.calls\n"

INFO_STRING = "This code currently supports the following gene callers:  GeneMark, Glimmer, Prodigal, RAST, and PHANOTATE. For more information regarding input to " + CODE_FILE + ", type:  " + CODE_FILE + " input"

##### GET INPUT PARAMETERS

fileSet = []
argCount = len(sys.argv)
if DEBUG:
    print("sys.argv is", sys.argv)
if argCount > 1:

    if PHATE_PIPELINE:  # First parameter is "log=<logFile>", second is "gff=<gffFile>", and remaining parameters are genecall files to compare
        LOG.close()  # close default log; open log in designated subdir
        GFF.close()  # close default gff out file; open gff out file in designated subdir
        #if argCount > 2:
        if argCount > 3:
            match_log = re.search(p_log, sys.argv[1])
            match_gff = re.search(p_gff, sys.argv[2])
            if match_log:
                LOG_FILE = match_log.group(1)  # override as named above
                LOG = open(LOG_FILE,"w")
                LOG.write("%s%s\n" % ("Opening log at ",datetime.datetime.now()))
                if DEBUG:
                    print("DEBUG CGC_main: LOG has been opened")
            else:
                print("ERROR: CGC_main.py expects name of log file as first input parameter. Parameter was:", sys.argv[1])
            if match_gff:
                GFF_FILE = match_gff.group(1)  # override as named above
                GFF = open(GFF_FILE,"w")
            #fileSet = sys.argv[2:]  # collect remaining command-line arguments
            fileSet = sys.argv[3:]  # collect remaining command-line arguments
            if DEBUG:
                print("DEBUG CGC_main: fileSet is", fileSet)
        else:
            print("ERROR: CGC_main says, insufficient arguments provided")

    else:  # "Help" input parameters should only be encountered if running code independently at command line
        match = re.search("help", sys.argv[1].lower())  
        if match:
            print(HELP_STRING)
            LOG.close(); exit(0)

        match = re.search("input", sys.argv[1].lower())
        if match:
            print(INPUT_STRING)
            LOG.close(); exit(0)

        match = re.search("usage", sys.argv[1].lower())
        if match:
            print(USAGE_STRING)
            LOG.close(); exit(0)

        match = re.search("detail", sys.argv[1].lower())
        if match:
            print(INFO_STRING)
            LOG.close(); exit(0)

        match = re.search("info", sys.argv[1].lower())
        if match:
            print(INFO_STRING)
            LOG.close(); exit(0)
        else:
            fileSet = sys.argv[1:]  # skip 0th element = name of code

else:
    LOG.write("%s\n" % ("Incorrect number of command-line arguments provided"))
    print(USAGE_STRING)
    LOG.close()
    exit(0)

##### BEGIN MAIN ################################################################################### 

count = 0
callerList = []
callSet_obj = CGC_geneCall.GeneCallSet()

####################################################################################################
# For each user-provided gene call file, create a call set and add to list of call sets

if CGC_PROGRESS == 'True':
    print("CGCmain says: Iterating through fileSet...")
if PHATE_PIPELINE:
    LOG.write("%s%s\n" % ("CGC Main: Iterating through fileSet at ",datetime.datetime.now()))
    LOG.write("%s%s\n" % ("CGC Main: fileSet is ",fileSet))

for geneFile in fileSet:
    # First, create a call set
    callSet = copy.deepcopy(callSet_obj)

    LOG.write("%s%s\n" % ("CGC Main: Opening geneFile ",geneFile))
    if CGC_MESSAGES == 'True':
        print("CGC Main: Opening geneFile ",geneFile)
    geneFile_handle = open(geneFile,"r")

    LOG.write("%s%s\n" % ("CGC Main: Adding calls from geneFile ",geneFile))
    if CGC_MESSAGES == 'True':
        print("CGCmain says: Adding calls from file", geneFile)
    callSet.AddGeneCalls(geneFile_handle) 
    geneFile_handle.close()

    LOG.write("%s%s\n" % ("CGC Main: Appending call set  number of calls is: ", len(callSet.geneCallList)))
    callerList.append(callSet) 

    if CGC_MESSAGES == 'True':
        print("CGCmain says: Number of gene calls in current gene call set:", len(callSet.geneCallList))

# Communicate
LOG.write("%s%s\n" % ("CGC Main: All call sets have been added to caller list. Number of call sets in callerList: ", len(callerList)))
callerString = ""; callers = "" 
for callSet in callerList:
    currentCaller = callSet.geneCaller + ' '
    callers += currentCaller 
LOG.write("%s%s\n" % ("CGC Main: callerList is ",callers))
totalCalls = 0
for callSet in callerList:
    totalCalls += len(callSet.geneCallList)
LOG.write("%s%s\n" % ("CGC Main: Total number of gene calls across callerList call sets is: ", totalCalls))
if CGC_MESSAGES == 'True':
    print("CGCmain says: callerList is:", end=' ') 
    for callSet in callerList:
        callSet.PrintAll_brief() 
if DEBUG:  # Print out gene calls (verbose)
    LOG.write("%s\n" % ("CGC Main / DEBUG:"))
    LOG.write("%s\n" % ("*********** Original Lists **********"))
    print("\n******************Original Lists:")
    for callSet in callerList:
        callSet.PrintAll2file(LOG)
        callSet.PrintAll()
        print()

####################################################################################################
# Sort calls in each list

LOG.write("%s\n" % ("CGC Main: Sorting gene calls for each caller"))
if CGC_PROGRESS == 'True':
    print("CGCmain: Sorting gene calls for each caller...")
if DEBUG:
    print("CGCmain / DEBUG: CGC_main says, Calling SortGeneCalls()")

# Sort calls for each caller
for callSet in callerList:
    LOG.write("%s\n" % ("CGC Main: Processing a callSet"))
    LOG.write("%s%s%s%s\n" % ("CGC Main: Before sorting, Length of callerList for caller ", callSet.geneCaller, " is ", len(callSet.geneCallList)))
    callSet.SortGeneCalls()
    LOG.write("%s%s%s%s\n" % ("CGC Main: After sorting, Length of callerList for caller ", callSet.geneCaller, " is ", len(callSet.geneCallList)))
LOG.write("%s\n" % ("CGC Main: callSet processing complete"))

if DEBUG:
    print("CGCmain / DEBUG: Returning from SortGeneCalls()")
    LOG.write("%s\n" % ("CGC Main / DEBUG: Returning from call to caller.SortGeneCalls()"))
    LOG.write("%s\n" % ("CGC Main / DEBUG: Current content of callerList, in detail:"))
    print("CGCmain / DEBUG \n******************Sorted Lists:")
    for callSet in callerList:
        callSet.PrintAll2file(LOG)
        callSet.PrintAll()
        print()

####################################################################################################
# Begin process to compare across the call sets

LOG.write("%s\n" % ("CGC Main: Comparing across the call sets..."))
if CGC_PROGRESS == 'True':
    print("CGCmain says: Comparing accross the call sets....")
if DEBUG:
    print("CGCmain says: Performing comparison....")
# Create comparison object
compareGCs = CGC_compare.Comparison()

####################################################################################################
# Merge the call sets

LOG.write("%s\n" % ("CGC Main: Merging the geneCall sets...."))
if CGC_PROGRESS == 'True':
    print("CGC Main: Merging the gene call sets....")
if DEBUG:
    print("CGCmain says: Merging the gene call sets....")
for callSet in callerList:
    compareGCs.Merge(callSet.geneCallList)  # Merge() merges one at a time, adding each gene call list the the existing merge

LOG.write("%s\n" % ("CGC Main: Final merged genes:"))
compareGCs.PrintMergeList2file(LOG)

####################################################################################################
# Compare the merged calls

LOG.write("%s\n" % ("CGC Main: Comparing across geneCall sets...."))
if CGC_PROGRESS == 'True':
    print("CGCmain says: Comparing across gene call sets....")
if DEBUG:
    print("CGCmain / DEBUG: Comparing across gene call sets....")

# Fist, identify unique gene calls
compareGCs.Compare()
if DEBUG:
    LOG.write("%s\n" % ("CGC Main: This is the Unique List:"))
    compareGCs.PrintUniqueList2file(LOG)

# Next, score the gene calls
LOG.write("%s\n" % ("CGC Main: Scoring gene calls...."))
if CGC_PROGRESS == 'True':
    print("CGCmain says: Scoring gene calls....")
compareGCs.Score()
if DEBUG:
    LOG.write("%s\n" % ("CGC Main: This is the scored gene-call list:"))
    compareGCs.PrintGenecallScores2file(LOG)

# Then, identify gene calls in common
LOG.write("%s\n" % ("CGC Main: Identifying common core..."))
if CGC_PROGRESS == 'True':
    print("CGCmain says: Identifying gene calls in common...")
compareGCs.IdentifyCommonCore()
LOG.write("%s\n" % ("CGC Main: This is the Common Core List:"))
compareGCs.PrintCommonCore2file(LOG)

####################################################################################################
# Print GFF output file and final report 

# Print GFF
LOG.write("%s\n" % ("CGC Main: Printing gene-call superset in GFF format"))
if CGC_PROGRESS == 'True':
    print("CGC Main: printing GFF formatted gene-call file....")
compareGCs.PrintGenecalls2file_gff(GFF,"superset")
compareGCs.PrintGenecalls2file_gff(LOG,"superset")

LOG.write("%s\n" % ("CGC Main: Printing report...."))
if CGC_PROGRESS == 'True':
    print("CGC Main: printing report....")
if DEBUG:
    print("CGC Main: printing report....")
    compareGCs.PrintAll()
compareGCs.PrintReport2file(LOG)
compareGCs.PrintReport()
compareGCs.PrintUniqueList2file(LOG)

##### CLEAN UP #####

if CGC_PROGRESS == 'True':
    print("CGC: complete.")
if DEBUG:
    print("CGC: complete.")
GFF.close()
LOG.write("%s%s\n" % ("CGC: complete at ",datetime.datetime.now()))
LOG.close()
